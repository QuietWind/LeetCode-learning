import {
  addTwoNumbers,
  ListNode,
  parseNodeToNumArr,
  parseNumArrToNode
} from "./../src/2.add-two-numbers";

test(`Add two list node`, () => {
  expect(
    parseNodeToNumArr(
      addTwoNumbers(parseNumArrToNode([2, 4, 3]), parseNumArrToNode([5, 6, 4]))
    )
  ).toEqual([7, 0, 8]);

  expect(
    parseNodeToNumArr(
      addTwoNumbers(parseNumArrToNode([5]), parseNumArrToNode([5]))
    )
  ).toEqual([0, 1]);

  expect(
    parseNodeToNumArr(
      addTwoNumbers(parseNumArrToNode([9, 9]), parseNumArrToNode([1]))
    )
  ).toEqual([0, 0, 1]);

  expect(
    parseNodeToNumArr(
      addTwoNumbers(
        parseNumArrToNode([
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          9
        ]),
        parseNumArrToNode([
          5,
          6,
          4,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          2,
          4,
          3,
          9,
          9,
          9,
          9
        ])
      )
    )
  ).toEqual([
    7,
    0,
    8,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    4,
    8,
    6,
    1,
    4,
    3,
    9,
    1
  ]);
});
